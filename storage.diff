diff --git a/src/include/partitioning/custom_part_check_generated.rb b/src/include/partitioning/custom_part_check_generated.rb
index d4172e6..106abb7 100644
--- a/src/include/partitioning/custom_part_check_generated.rb
+++ b/src/include/partitioning/custom_part_check_generated.rb
@@ -166,13 +166,14 @@ module Yast
             end
             raid_type = Ops.get_string(part, "raid_type", "")
           elsif mountpoint == ""
+            dlabel = Ops.get_string(diskinfo, "label")
             if Partitions.PrepBoot &&
-                (fsid == Partitions.fsid_prep_chrp_boot || fsid == 6)
+                (fsid == Partitions.FsidBoot(dlabel) || fsid == 6)
               boot_found = true
               boot_end = Region.End(Ops.get_list(part, "region", []))
               boot_fs = Ops.get_symbol(part, "used_fs", :unknown)
               boot_size_k = Ops.get_integer(part, "size_k", 0)
-              boot_fsid = Partitions.fsid_prep_chrp_boot
+              boot_fsid = Partitions.FsidBoot(dlabel)
             elsif Arch.board_mac &&
                 Ops.get_symbol(part, "used_fs", :unknown) == :hfs
               boot_found = true
diff --git a/src/include/partitioning/custom_part_lib.rb b/src/include/partitioning/custom_part_lib.rb
index 6a27870..db8df2f 100644
--- a/src/include/partitioning/custom_part_lib.rb
+++ b/src/include/partitioning/custom_part_lib.rb
@@ -837,7 +837,8 @@ module Yast
               Partitions.fsid_raid,
               Partitions.fsid_hibernation,
               Partitions.fsid_bios_grub,
-              Partitions.fsid_prep_chrp_boot
+              Partitions.fsid_prep_chrp_boot,
+              Partitions.fsid_gpt_prep
             ],
             fs_int
           )
diff --git a/src/modules/FileSystems.rb b/src/modules/FileSystems.rb
index 28d3df0..d513e02 100644
--- a/src/modules/FileSystems.rb
+++ b/src/modules/FileSystems.rb
@@ -258,6 +258,7 @@ module Yast
         :ntfs       => true,
         :xxefi      => false,
         :xbootdisk  => false,
+        :xxbootdisk => false,
         :xbootfat   => false,
         :xhibernate => true,
         :raid       => true,
@@ -355,11 +356,18 @@ module Yast
           :fsid_item       => "0xFD Linux RAID "
         },
         :xbootdisk  => {
-          :name            => "PPCBOOT",
+          :name            => "PReP",
           :fsid            => Partitions.fsid_prep_chrp_boot,
           :supports_format => false,
           :fsid_item       => "0x41 PPC PReP Boot"
         },
+        :xxbootdisk  => {
+          :name            => "GPT PReP",
+          :fsid            => Partitions.fsid_gpt_prep,
+          :supports_format => false,
+          :label           => "gpt",
+          :fsid_item       => "0x00 PReP Boot"
+        },
         :xbootfat   => {
           :name            => "FATBOOT",
           :fsid            => Partitions.fsid_fat16,
@@ -1384,6 +1392,7 @@ module Yast
       if Arch.ppc
         Ops.set(@support, :vfat, Arch.board_chrp)
         Ops.set(@support, :xbootdisk, true)
+        Ops.set(@support, :xxbootdisk, true)
         Ops.set(@support, :xbootfat, Arch.board_chrp)
       end
       Ops.set(@support, :vfat, false) if Arch.s390
diff --git a/src/modules/Partitions.rb b/src/modules/Partitions.rb
index 395fcc1..e476e9c 100644
--- a/src/modules/Partitions.rb
+++ b/src/modules/Partitions.rb
@@ -61,6 +61,7 @@ module Yast
       @fsid_gpt_service = 260
       @fsid_gpt_msftres = 261
       @fsid_bios_grub = 263
+      @fsid_gpt_prep = 264
       @fsid_freebsd = 165
       @fsid_openbsd = 166
       @fsid_netbsd = 169
@@ -311,14 +312,14 @@ module Yast
       ret
     end
 
-
-    def FsidBoot
+    def FsidBoot(dlabel = nil)
       if @fsid_boot == 0
         @fsid_boot = @fsid_native
         if EfiBoot() || Arch.ia64
           @fsid_boot = @fsid_gpt_boot
         elsif PrepBoot()
-          @fsid_boot = @fsid_prep_chrp_boot
+            @fsid_boot = @fsid_prep_chrp_boot
+            @fsid_boot = @fsid_gpt_prep if dlabel && dlabel == "gpt"
         elsif Arch.board_mac
           @fsid_boot = @fsid_mac_hfs
         end
@@ -855,6 +856,8 @@ module Yast
           return "Apple_UFS"
         when 263
           return "BIOS Grub"
+        when 264
+          return "GPT PReP"
         else
           return "unknown"
       end
@@ -995,6 +998,7 @@ module Yast
     publish :variable => :fsid_fat16, :type => "const integer"
     publish :variable => :fsid_fat32, :type => "const integer"
     publish :variable => :fsid_prep_chrp_boot, :type => "const integer"
+    publish :variable => :fsid_gpt_prep, :type => "const integer"
     publish :variable => :fsid_mac_hidden, :type => "const integer"
     publish :variable => :fsid_mac_hfs, :type => "const integer"
     publish :variable => :fsid_mac_ufs, :type => "const integer"
@@ -1038,7 +1042,7 @@ module Yast
     publish :function => :BootCyl, :type => "integer ()"
     publish :function => :PrepBoot, :type => "boolean ()"
     publish :function => :BootPrimary, :type => "boolean ()"
-    publish :function => :FsidBoot, :type => "integer ()"
+    publish :function => :FsidBoot, :type => "integer (string)"
     publish :function => :NeedBoot, :type => "boolean ()"
     publish :function => :IsDosPartition, :type => "boolean (integer)"
     publish :function => :IsDosWinNtPartition, :type => "boolean (integer)"
diff --git a/src/modules/Storage.rb b/src/modules/Storage.rb
index b2363db..814cfe2 100644
--- a/src/modules/Storage.rb
+++ b/src/modules/Storage.rb
@@ -6134,9 +6134,10 @@ module Yast
       tg = deep_copy(tg)
       have_ppc_boot = false
       Builtins.foreach(tg) do |dev, disk|
+        dlabel = disk.fetch("label", "")
         disk.fetch("partitions",[]).each do |part|
           if !have_ppc_boot &&
-             part.fetch("fsid",0) == Partitions.fsid_prep_chrp_boot &&
+             part.fetch("fsid",0) == Partitions.FsidBoot(dlabel) &&
              part.fetch("mount","").empty? &&
              part.fetch("create",false)
             have_ppc_boot = true
@@ -6146,12 +6147,13 @@ module Yast
       Builtins.y2milestone( "SpecialBootHandling: ppc_boot:%1", have_ppc_boot)
       Builtins.foreach(tg) do |dev, disk|
         new_part = []
+        dlabel = disk.fetch("label", "")
         disk.fetch("partitions",[]).each do |part|
           # convert a mount point of /boot to a 41 PReP boot partition
           if Partitions.PrepBoot &&
              part.fetch("mount","") == Partitions.BootMount &&
              !have_ppc_boot
-            id = Partitions.fsid_prep_chrp_boot
+            id = Partitions.FsidBoot(dlabel)
             part["format"]=false
             part["mount"]=""
             part["fstype"]=Partitions.FsIdToString(id)
@@ -6186,7 +6188,7 @@ module Yast
             Builtins.y2milestone( "SpecialBootHandling modified GPT boot part=%1", part)
           end
           if !Partitions.EfiBoot && (Arch.i386||Arch.x86_64) &&
-	     disk.fetch("label","") == "gpt" &&
+	     label == "gpt" &&
              part.fetch("mount","") == Partitions.BootMount
             id = Partitions.fsid_bios_grub
             part["fsid"] = id
@@ -6699,6 +6701,7 @@ module Yast
           Builtins.contains(
             [
               Partitions.fsid_prep_chrp_boot,
+	      Partitions.fsid_gpt_prep,
               Partitions.fsid_lvm,
               Partitions.fsid_raid
             ],
diff --git a/src/modules/StorageProposal.rb b/src/modules/StorageProposal.rb
index 3d140bd..ca10f9c 100644
--- a/src/modules/StorageProposal.rb
+++ b/src/modules/StorageProposal.rb
@@ -649,6 +649,7 @@ module Yast
       boot = pl.index { |e| e.fetch("mount","")==Partitions.BootMount }!=nil
       root = pl.index { |e| e.fetch("mount","")=="/" }!=nil
       tc = deep_copy(conf)
+      dlabel = disk.fetch("label", "")
       Builtins.y2milestone("try_add_boot conf %1", conf)
       Builtins.y2milestone(
         "try_add_boot boot %1 root %2 force %3 need_boot:%4",
@@ -665,7 +666,7 @@ module Yast
 	  pb["size"] = sz
 	end
 	pb["fsys"] = Partitions.DefaultBootFs
-	pb["id"] = Partitions.FsidBoot
+	pb["id"] = Partitions.FsidBoot(dlabel)
         pb["auto_added"] = true
         pb["max_cyl"] = Partitions.BootCyl
         pb["primary"] = Partitions.BootPrimary
@@ -3223,6 +3224,7 @@ module Yast
         fsys = Builtins.union(fsys, [fs]) if fs != :none
       end
       Ops.set(conf, "keep_partition_fsys", fsys)
+      dlabel = Ops.get_string(xmlflex, "disklabel")
       partitions = []
       Builtins.foreach(Ops.get_list(xmlflex, "partitions", [])) do |p|
         partition = {}
@@ -3292,7 +3294,7 @@ module Yast
             Ops.set(partition, "fsys", Partitions.DefaultBootFs)
           end
           if Ops.get_integer(partition, "id", 0) == 0
-            Ops.set(partition, "id", Partitions.FsidBoot)
+            Ops.set(partition, "id", Partitions.FsidBoot(dlabel))
           end
           Ops.set(partition, "max_cyl", Partitions.BootCyl)
         end
@@ -3494,6 +3496,7 @@ module Yast
             Ops.set(part, "fsys", Partitions.DefaultBootFs)
           end
           if Ops.get_integer(part, "id", 0) == 0
+            # part.info doesn't know about disklabel
             Ops.set(part, "id", Partitions.FsidBoot)
           end
           Ops.set(part, "max_cyl", Partitions.BootCyl)
@@ -3626,6 +3629,7 @@ module Yast
 
     def can_boot_reuse(disk, label, boot, max_prim, partitions)
       ret = []
+      dlabel = disk.fetch("label", "")
       Builtins.y2milestone("can_boot_reuse boot:%1", boot)
       if boot && !Partitions.PrepBoot
         Builtins.y2milestone(
@@ -3639,12 +3643,12 @@ module Yast
         Builtins.y2milestone( "can_boot_reuse pl:%1", pl )
         boot2 = Builtins.find(pl) do |p|
           p.fetch("fsid",0) == Partitions.fsid_gpt_boot ||
-	  p.fetch("fsid",0) == Partitions.FsidBoot &&
+	  p.fetch("fsid",0) == Partitions.FsidBoot(dlabel) &&
 	    p.fetch("size_k",0)*1024<=Partitions.MaximalBootsize ||
 	  p.fetch("detected_fs",:unknown) == :hfs &&
 	    p.fetch("boot",false) &&
 	    label == "mac" ||
-	  p.fetch("fsid",0) == Partitions.fsid_prep_chrp_boot &&
+	  p.fetch("fsid",0) == Partitions.FsidBoot(dlabel) &&
 	    p.fetch("nr",0)<=max_prim &&
 	    Partitions.PrepBoot ||
 	  p.fetch("fsid",0) == Partitions.fsid_bios_grub &&
@@ -4147,12 +4151,13 @@ module Yast
       ]
       remk = ["del_ptable", "disklabel"]
       Builtins.foreach(ddev) do |s|
+	dlabel = Ops.get_string(target, [s, "label"])
         Ops.set(
           tg,
           [s, "partitions"],
           Builtins.maplist(Ops.get_list(tg, [s, "partitions"], [])) do |p|
             if Builtins.contains(linux_pid, Ops.get_integer(p, "fsid", 0)) ||
-                Ops.get_integer(p, "fsid", 0) == Partitions.FsidBoot &&
+                Ops.get_integer(p, "fsid", 0) == Partitions.FsidBoot(dlabel) &&
                   !Partitions.EfiBoot &&
                   Ops.less_or_equal(
                     Ops.multiply(Ops.get_integer(p, "size_k", 0), 1024),
@@ -4160,7 +4165,7 @@ module Yast
                   ) ||
                 Partitions.PrepBoot &&
                   (Ops.get_integer(p, "fsid", 0) ==
-                    Partitions.fsid_prep_chrp_boot ||
+                    Partitions.FsidBoot(dlabel) ||
                     Ops.get_integer(p, "fsid", 0) == 6)
               Ops.set(p, "linux", true)
             else
@@ -5773,7 +5778,9 @@ module Yast
               did_remove_vg(Ops.get_list(disk, "partitions", []), key)
             vg = ""
           end
-          ps = do_vm_disk_conf(disk, have_boot ? {} : boot, boot2, vg, key)
+	  dlabel = Ops.get_string(disk, "label")
+	  boot["id"] = Partitions.FsidBoot(dlabel) if dlabel == "gpt" 
+          ps = do_vm_disk_conf(disk, have_boot ? {} : {"label": ...}.merge(boot), boot2, vg, key)
           if Ops.get_boolean(ps, "ok", false)
             mb = get_vm_sol(ps)
             if Ops.greater_than(
@@ -5933,12 +5940,13 @@ module Yast
       opts = GetControlCfg()
       target = remove_mount_points(target)
       target = remove_vm(target, key)
+      dlabel = disk.fetch("label", "")
       Ops.set(ret, "target", target)
       boot = {
         "mount"   => Partitions.BootMount,
         "size"    => Partitions.ProposedBootsize,
         "fsys"    => Partitions.DefaultBootFs,
-        "id"      => Partitions.FsidBoot,
+        "id"      => Partitions.FsidBoot(dlabel),
         "max_cyl" => Partitions.BootCyl
       }
       Ops.set(boot, "primary", true) if Partitions.BootPrimary
